{"version":3,"sources":["logo.svg","List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","List","props","react_default","a","createElement","items","map","item","index","key","Navigation","BrowserRouter","Link","to","Switch","Route","path","exact","component","Home","Userlist","NoMatch","Component","Timer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","start","_this2","addInterval","setInterval","increase","clearInterval","setState","parseInt","Alert","href","onClick","e","alert","preventDefault","Toggle","_this3","toggleStatus","toggleClick","bind","assertThisInitialized","Menulis","_this4","handleSubmit","event","concat","toConsumableArray","todoItem","handleChange","target","value","onSubmit","onChange","src_List","User","_this5","getUsers","isLoading","fetch","then","response","json","data","users","_this$state","user","name","Fragment","App_User","App","className","App_Navigation","src","logo","alt","App_Timer","App_Toggle","App_Menulis","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.187d19bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nfunction List (props) {\n    return (\n    \t<ul>\n    \t\t{ props.items.map((item, index) => \n    \t\t\t<li key={index}>{item}</li>\n    \t\t)}\n    \t</ul>\n    )\n}\n\nexport default List;","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport List from './List';\n\nclass Navigation extends Component {\n\trender(){\n\t\treturn (\n\t\t\t<BrowserRouter>\n\t\t\t\t<div>\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<li> <Link to=\"/\">Home</Link></li>\n\t\t\t\t\t\t<li> <Link to=\"/users\">User</Link></li>\n\t\t\t\t\t</nav>\n\n\t\t\t\t\t<main>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route path=\"/\" exact component={Home} />\n\t\t\t\t\t\t\t<Route path=\"/users\" exact component={Userlist} />\n\t\t\t\t\t\t\t<Route component={NoMatch} />\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</main>\n\t\t\t\t</div>\n\t\t\t</BrowserRouter>\n\t\t)\n\t}\n}\n\nclass Timer extends Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\t\tthis.state = {\n\t\t\t\ttime: props.start\n\t\t\t}\n\t}\n\t//Lifecycle\n\tcomponentDidMount(){\n\t\tthis.addInterval = setInterval( () => this.increase(), 1000)\n\t}\n\n\tcomponentWillUnmount(){\n\t\tclearInterval(this.addInterval)\n\t}\n\n\tincrease(){\n\t\t//Update state setiap detik\n\t\tthis.setState((state, props) => ({\n\t\t\ttime: parseInt(state.time) + 1\n\t\t}))\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t\t<div>{this.state.time}</div>\n\t\t\t)\n\t}\n}\n\nfunction Alert() {\n\tfunction alertClick(e) {\n\t\talert('Mengeluarkan alert')\n\t\te.preventDefault();\n\t}\n\treturn (\n\t\t<a href=\"#\" onClick={alertClick}>Alert</a>\n\t)\n}\n\nclass Toggle extends Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\ttoggleStatus: true\n\t\t}\n\t\tthis.toggleClick = this.toggleClick.bind(this)\n\t}\n\t\n\ttoggleClick() {\n\t\tthis.setState(state => ({\n\t\t\ttoggleStatus: !state.toggleStatus\n\t\t}))\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<button onClick={this.toggleClick}>\n\t\t\t\t{this.state.toggleStatus ? 'ON' : 'OFF'}\n\t\t\t</button>\n\t\t)\n\t}\n}\n\nclass Menulis extends Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\ttodoItem: '',\n\t\t\titems: []\n\t\t}\n\t}\n\n\thandleSubmit = (event) => {\n\t\tevent.preventDefault()\n\t\tthis.setState({\n\t\t\titems: [...this.state.items, this.state.todoItem],\n\t\t\ttodoItem: ''\n\t\t})\n\t}\n\n\thandleChange = (event) => {\n\t\tthis.setState({\n\t\t\t\t\ttodoItem: event.target.value\n\t\t\t\t})\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t          \t<input value={this.state.todoItem} onChange={this.handleChange} />\n\t\t          \t<button>add</button>\n\t\t        </form>\n\t\t        <List items={this.state.items} />\n\t        </div>\n\t\t)\n\t}\n}\n\nclass User extends Component {\n\tconstructor (props){\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tusers: [],\n\t\t\tisLoading: false\n\t\t}\n\t}\n\n\tgetUsers = (event) => {\n\t\tevent.preventDefault()\n\t\tthis.setState({\n\t\t\t\tisLoading: true\n\t\t\t})\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t.then(response => response.json())\n\t\t.then(data => this.setState({ users: data, isLoading: false }))\n\t}\n\n\trender() {\n\t\tconst {users, isLoading} = this.state\n\t\tif (isLoading) {\n\t\t\treturn <p>Loading..........</p>\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<a onClick={this.getUsers} href='#'>Daftar Users (API)</a>\n\t\t\t\t<ul>\n\t\t\t\t\t{users.map((user, index) => \n\t\t\t\t\t\t<li key={index}>{user.name}</li>\n\t\t\t\t\t)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nfunction NoMatch() {\n\treturn <h2>Halaman tidak di temukan</h2>\n}\n\nfunction Userlist() {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<h2>Halaman User</h2>\n\t\t\t<User />\n\t\t</React.Fragment>\n\t)\n}\n\nfunction Home() {\n\treturn <h2>Halaman Home</h2>\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Navigation />\n          <h5>Hery Fidiawan</h5>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <Timer start=\"0\" />\n          <Timer start=\"5\" />\n          <Timer start=\"10\" />\n          <Alert />\n          <Toggle />\n          <Menulis />\n          <User />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}